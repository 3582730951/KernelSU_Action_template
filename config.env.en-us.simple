### configuration file
CONFIG_ENV=config.env.simple
// The file name of the configuration file

### Kernel settings
KERNEL_SOURCE=
// (HTTP link)
// The source code address of the kernel, git warehouse should be preferred, compatible with .tar.gz and .zip files
// For example: https://github.com/magojohnji/D8G_Kernel_oxygen.git

KERNEL_SOURCE_BRANCH=
// (string)
// branch name of the kernel repository (leave blank if using .tar.gz or .zip files)
// Example: main, 13, su, etc.

KERNEL_CONFIG=
// (string)
// Kernel configuration file (can be found under arch/arm64/configs(/vendor) of the kernel source code)
// eg KharaMe_defconfig, vendor/munch_defconfig, vendor/violet-perf_defconfig etc

KERNEL_IMAGE_NAME=
// (string)
// The compression type of the kernel product
// Image: RAW format
// Image.gz: GZ compression format
// Image.gz-dtb: GZ compressed plus DTB file

ARCH=arm64
// (string)
// The name of the architecture corresponding to the kernel to be compiled
// Example: arm64

### Clang compilation toolchain settings
ENABLE_CLANG=true
// (true or false)
// Configure whether to enable Clang compilation

# AOSP Clang settings
USE_AOSP_CLANG=true
// (true or false)
// Configure whether to use AOSP Clang

AOSP_CLANG_BRANCH=master
// (string)
// branch name of AOSP Clang

AOSP_CLANG_VERSION=r450784e
// (string)
// AOSP Clang version
// Example: Clang 12.0.5 - Android S - r416183b
// Clang 14.0.6 - Android T - r450784d
// Clang 14.0.7 - r450784e
// Clang 15.0.1 - r458507
// If a 403 error is displayed, please go to https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 to find available branches and versions

# Customize Clang
USE_CUSTOM_CLANG=false
// (true or false)
// Configure whether to use a custom Clang

CUSTOM_CLANG_SOURCE=https://github.com/magojohnji/ZyCromerZ-Clang.git
// (HTTP link)
// Custom Clang warehouse address (or .tar.gz, .zip file)

CUSTOM_CLANG_BRANCH=main
// (string)
// Customize the branch name of the Clang repository, (if you use a .tar.gz or .zip file, leave it blank)

### Gcc compilation toolchain settings
ENABLE_GCC=true
// (true or false)
// Whether to enable the Gcc compilation toolchain

# AOSP Gcc compilation toolchain
ENABLE_AOSP_GCC_ARM64=true
// (true or false)
// Configure whether to use the AOSP Gcc 64-bit compilation toolchain

ENABLE_AOSP_GCC_ARM32=true
// (true or false)
// Configure whether to use the AOSP Gcc 32-bit compilation toolchain

AOSP_GCC_SYSTEM=linux-x86
// (string)
// Compile the operating system of the kernel
// Linux: linux-x86
// macOS: darwin-x86

AOSP_GCC_ARM64_VERSION=aarch64-linux-android-4.9
AOSP_GCC_ARM32_VERSION=arm-linux-androideabi-4.9
// (string)
// Version of AOSP Gcc
// For customization please go to https://android.googlesource.com/platform/prebuilts/gcc/

AOSP_GCC_ANDROID_VERSION=12.1.0
// (string)
// Android version corresponding to AOSP Gcc
// eg 12.1.0, 10.0.0

AOSP_GCC_RELEASE=r27
// (string)
// AOSP Gcc release version number

# Customize Gcc
USE_CUSTOM_GCC_64=false
// (true or false)
// Configure whether to use a custom Gcc 64-bit compilation toolchain

CUSTOM_GCC_64_SOURCE=
// (HTTP link)
// source of custom Gcc 64-bit compilation toolchain, support git repository, tar.gz or .zip file

CUSTOM_GCC_64_BRANCH=
// (string)
// A fork of the custom Gcc 64-bit compilation toolchain (if using a .tar.gz or .zip file, leave it blank)

USE_CUSTOM_GCC_32=false
// (true or false)
// Configure whether to use a custom Gcc 32-bit compilation toolchain

CUSTOM_GCC_32_SOURCE=
// (HTTP link)
// source of custom Gcc 32-bit compilation toolchain, support git repository, tar.gz or .zip file

CUSTOM_GCC_32_BRANCH=
// (string)
// A fork of the custom Gcc 32-bit compilation toolchain (if using a .tar.gz or .zip file, leave it blank)

### KernelSU settings
ENABLE_KERNELSU=true
// (true or false)
// Configure whether to add KernelSU to compile the kernel

KERNELSU_INSTALLER=https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh
// (HTTP link)
// KernelSU installation script address
// For example: tiann original version: https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh
// Modified version of MlgmXyysd: https://raw.githubusercontent.com/MlgmXyysd/KernelSU_Debug/master/kernel/setup.sh

KERNELSU_TAG=main
// (string)
// Release version number of KernelSU
// Example: for tiann's original version,
// main branch (development version): KERNELSU_TAG=main
// Latest TAG (stable version): KERNELSU_TAG=
// Specify TAG (such as v0.5.2): KERNELSU_TAG=v0.5.2
// Other versions please explore by yourself

KSU_EXPECTED_SIZE=
// (string)
// Customize the size value of the KernelSU manager signature, please leave blank if not required

KSU_EXPECTED_HASH=
// (string)
// Customize the hash value signed by the KernelSU manager, please leave it blank if you don't need it

BUILD_KERNELSU_BOOT_IMG=true
// (true or false)
// Configure whether to integrate KernelSU into the boot image

KERNELSU_SOURCE_BOOT_IMAGE=
// (HTTP link)
// Original boot image link, HTTP direct link is required
// For example: https://raw.githubusercontent.com/abc/def/main/boot/boot.img

### Magisk Settings
ENABLE_MAGISK=true
// (true or false)
// Configure whether to use Magisk

MAGISK_APK=https://github.com/topjohnwu/Magisk/releases/download/v26.1/Magisk-v26.1.apk
// (HTTP link)
// The direct link of Magisk's APK (theoretically, as long as it is a zip file format)
// You can also use third-party Magisk, such as Delta, Delta-32-Bit, Alpha, Lite, Cygisk, Monet, Maru, etc.

MAGISK_PATCH_PARTITION=boot
// (string)
// The type of partition Magisk will patch
// For example: boot, init_boot, vendor_boot

MAGISK_SOURCE_BOOT_IMAGE=
// (HTTP link)
// Link to the source image to be patched by Magisk
// For example: https://raw.githubusercontent.com/abc/def/main/boot/boot.img

### Kernel compilation settings
DISABLE-LTO=false
// (true or false)
// Configure whether to turn off LTO optimization, enabling it may cause errors

DISABLE_CC_WERROR=false
// (true or false)
// Used to repair some kernels that do not support or disable Kprobes, and repair KernelSU that does not detect variables that enable Kprobes and throw warnings and cause errors

ADD_KPROBES_CONFIG=true
// (true or false)
// Add Kprobes, automatically inject parameters in defconfig

ADD_OVERLAYFS_CONFIG=true
// (true or false)
// Add Overlayfs, automatically inject parameters in defconfig, provide support for reading and writing of KernelSU module and system partition

ENABLE_CCACHE=true
// (true or false)
// Whether to enable CCACHE compilation to make the second compilation of the kernel faster, at least 2/5 of the time can be reduced

NEED_DTBO=false
// (true or false)
// Whether to upload DTBO

BUILDER_HOST=Github-Action
// (string)
// Compile the machine name of the kernel

***** Do not change CUSTOM CMDS if you have USE CUSTOM CLANG or CUSTOM GCC set to false *****

TC_CUSTOM_CMDS:CLANG_TRIPLE=aarch64-linux-gnu-
// custom toolchain command to successfully build the kernel

EXTRA_CMDS:LD=ld.lld
// Additional commands to successfully build the kernel