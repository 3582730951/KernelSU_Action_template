### 配置文件
CONFIG_ENV=config.env.simple
// 配置文件的文件名

### 内核设置
KERNEL_SOURCE=
// （HTTP链接）
// 内核的源代码地址，应首选 git 仓库，兼容 .tar.gz 以及 .zip 文件
// 例如：https://github.com/magojohnji/D8G_Kernel_oxygen.git

KERNEL_SOURCE_BRANCH=
// （字符串）
// 内核储存库的分支名称（如果使用 .tar.gz 或者 .zip 文件，留空即可）
// 例如：main、13、su 等

KERNEL_CONFIG=
// （字符串）
// 内核配置文件（可在内核源码的 arch/arm64/configs(/vendor) 下寻找）
// 例如 KharaMe_defconfig、vendor/munch_defconfig、vendor/violet-perf_defconfig 等

KERNEL_IMAGE_NAME=
// （字符串）
// 内核产物的压缩类型
// Image：RAW 格式
// Image.gz：GZ 压缩格式
// Image.gz-dtb：GZ 压缩加 DTB 文件

ARCH=arm64
// （字符串）
// 要编译的内核所对应的架构名称
// 例如：arm64

### Clang 编译工具链设置
ENABLE_CLANG=true
// （ true 或 false ）
// 配置是否开启 Clang 编译

# AOSP Clang 设置
USE_AOSP_CLANG=true
// （ true 或 false ）
// 配置是否使用 AOSP Clang

AOSP_CLANG_BRANCH=master
// （字符串）
// AOSP Clang 的分支名称

AOSP_CLANG_VERSION=r450784e
// （字符串）
// AOSP Clang 的版本
// 例如：Clang 12.0.5 - Android S - r416183b 
//       Clang 14.0.6 - Android T - r450784d 
//       Clang 14.0.7 - r450784e 
//       Clang 15.0.1 - r458507 
// 如果提示 403 错误，请去 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 寻找可用分支、版本

# 自定义 Clang
USE_CUSTOM_CLANG=false
// （ true 或 false ）
// 配置是否使用自定义的 Clang

CUSTOM_CLANG_SOURCE=https://github.com/magojohnji/ZyCromerZ-Clang.git
// （HTTP链接）
// 自定义 Clang 的仓库地址（或 .tar.gz、.zip 文件）

CUSTOM_CLANG_BRANCH=main
// （字符串）
// 自定义 Clang 仓库的分支名称，（如果使用 .tar.gz 或者 .zip 文件，留空即可）

### Gcc 编译工具链设置
ENABLE_GCC=true
// （ true 或 false ）
// 是否开启Gcc 编译工具链

# AOSP Gcc 编译工具链
ENABLE_AOSP_GCC_ARM64=true
// （ true 或 false ）
// 配置是否使用 AOSP Gcc 64 位编译工具链

ENABLE_AOSP_GCC_ARM32=true
// （ true 或 false ）
// 配置是否使用 AOSP Gcc 32 位编译工具链

AOSP_GCC_SYSTEM=linux-x86
// （字符串）
// 编译内核的操作系统
// Linux：linux-x86
// macOS：darwin-x86

AOSP_GCC_ARM64_VERSION=aarch64-linux-android-4.9
AOSP_GCC_ARM32_VERSION=arm-linux-androideabi-4.9
// （字符串）
// AOSP Gcc 的版本
// 如需自定义请至 https://android.googlesource.com/platform/prebuilts/gcc/ 

AOSP_GCC_ANDROID_VERSION=12.1.0
// （字符串）
// AOSP Gcc 所对应的安卓版本
// 如 12.1.0、10.0.0

AOSP_GCC_RELEASE=r27
// （字符串）
// AOSP Gcc 发布版本号

# 自定义 Gcc
USE_CUSTOM_GCC_64=false
// （ true 或 false ）
// 配置是否使用自定义的 Gcc 64 位编译工具链

CUSTOM_GCC_64_SOURCE=
// （HTTP链接）
// 自定义的 Gcc 64 位编译工具链的源，支持 git 仓库，tar.gz 或者 .zip 文件

CUSTOM_GCC_64_BRANCH=
// （字符串）
// 自定义的 Gcc 64 位编译工具链的分支（如果使用 .tar.gz 或者 .zip 文件，留空即可）

USE_CUSTOM_GCC_32=false
// （ true 或 false ）
// 配置是否使用自定义的 Gcc 32 位编译工具链

CUSTOM_GCC_32_SOURCE=
// （HTTP链接）
// 自定义的 Gcc 32 位编译工具链的源，支持 git 仓库，tar.gz 或者 .zip 文件

CUSTOM_GCC_32_BRANCH=
// （字符串）
// 自定义的 Gcc 32 位编译工具链的分支（如果使用 .tar.gz 或者 .zip 文件，留空即可）

### KernelSU 设置
ENABLE_KERNELSU=true
// （ true 或 false ）
// 配置是否加入 KernelSU 编译内核

KERNELSU_INSTALLER=https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh
// （HTTP链接）
// KernelSU 的安装脚本地址
// 例如：tiann 原版：https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh
//      MlgmXyysd修改版：https://raw.githubusercontent.com/MlgmXyysd/KernelSU_Debug/master/kernel/setup.sh

KERNELSU_TAG=main
// （字符串）
// KernelSU 的发布版本号
// 例如：对于 tiann 的原版，
// main 分支(开发版): KERNELSU_TAG=main
// 最新 TAG(稳定版): KERNELSU_TAG=
// 指定 TAG(如v0.5.2): KERNELSU_TAG=v0.5.2
// 其他版本请自行探索

KSU_EXPECTED_SIZE=
// （字符串）
// 自定义KernelSU管理器签名的size值，不需要请留空

KSU_EXPECTED_HASH=
// （字符串）
// 自定义KernelSU管理器签名的hash值，不需要请留空

BUILD_KERNELSU_BOOT_IMG=true
// （ true 或 false ）
// 配置是否集成 KernelSU 到 boot 镜像中

KERNELSU_SOURCE_BOOT_IMAGE=
// （HTTP链接）
// 原 boot 镜像链接，需要HTTP直链
// 例如：https://raw.githubusercontent.com/abc/def/main/boot/boot.img

### Magisk 设置
ENABLE_MAGISK=true
// （ true 或 false ）
// 配置是否使用 Magisk

MAGISK_APK=https://github.com/topjohnwu/Magisk/releases/download/v26.1/Magisk-v26.1.apk
// （HTTP链接）
// Magisk 的 APK （理论上只要是 zip 文件格式就可以）的直链
// 你也可以使用第三方 Magisk，例如 Delta，Delta-32-Bit，Alpha，Lite，Cygisk，Monet，Maru 等

MAGISK_PATCH_PARTITION=boot
// （字符串）
// Magisk 要修补的分区的类型
// 例如：boot、init_boot、vendor_boot

MAGISK_SOURCE_BOOT_IMAGE=
// （HTTP链接）
// Magisk 要修补的源镜像链接
// 例如：https://raw.githubusercontent.com/abc/def/main/boot/boot.img

### 内核编译设置
DISABLE-LTO=false
// （ true 或 false ）
// 配置是否关闭 LTO 优化，启用有可能导致错误

DISABLE_CC_WERROR=false
// （ true 或 false ）
// 用于修复某些不支持或关闭了Kprobes的内核，修复KernelSU未检测到开启Kprobes的变量抛出警告导致错误

ADD_KPROBES_CONFIG=true
// （ true 或 false ）
// 添加 Kprobes，自动在 defconfig 注入参数

ADD_OVERLAYFS_CONFIG=true
// （ true 或 false ）
// 添加 Overlayfs，自动在 defconfig 注入参数，为 KernelSU 模块和 system 分区读写提供支持

ENABLE_CCACHE=true
// （ true 或 false ）
// 是否启用 CCACHE 编译，以让第二次编译内核更快，最少可以减少 2/5 的时间

NEED_DTBO=false
// （ true 或 false ）
// 是否上传 DTBO

BUILDER_HOST=Github-Action
// （字符串）
// 编译内核的机器名

***** 如果您将 USE CUSTOM CLANG 或 CUSTOM GCC 设置为 false，则请勿更改 CUSTOM CMDS *****

TC_CUSTOM_CMDS:CLANG_TRIPLE=aarch64-linux-gnu-
// 成功构建内核的自定义工具链命令

EXTRA_CMDS:LD=ld.lld
// 成功构建内核的附加命令




