### 配置文件
CONFIG_ENV=config.env.simple
// 配置文件的文件名

### 內核設置
KERNEL_SOURCE=
// （HTTP鏈接）
// 內核的源代碼地址，應首選 git 倉庫，兼容 .tar.gz 以及 .zip 文件
// 例如：https://github.com/magojohnji/D8G_Kernel_oxygen.git

KERNEL_SOURCE_BRANCH=
// （字符串）
// 內核儲存庫的分支名稱（如果使用 .tar.gz 或者 .zip 文件，留空即可）
// 例如：main、13、su 等

KERNEL_CONFIG=
// （字符串）
// 內核配置文件（可在內核源碼的 arch/arm64/configs(/vendor) 下尋找）
// 例如 KharaMe_defconfig、vendor/munch_defconfig、vendor/violet-perf_defconfig 等

KERNEL_IMAGE_NAME=
// （字符串）
// 內核產物的壓縮類型
// Image：RAW 格式
// Image.gz：GZ 壓縮格式
// Image.gz-dtb：GZ 壓縮加 DTB 文件

ARCH=arm64
// （字符串）
// 要編譯的內核所對應的架構名稱
// 例如：arm64

### Clang 編譯工具鏈設置
ENABLE_CLANG=true
// （ true 或 false ）
// 配置是否開啟 Clang 編譯

# AOSP Clang 設置
USE_AOSP_CLANG=true
// （ true 或 false ）
// 配置是否使用 AOSP Clang

AOSP_CLANG_BRANCH=master
// （字符串）
// AOSP Clang 的分支名稱

AOSP_CLANG_VERSION=r450784e
// （字符串）
// AOSP Clang 的版本
// 例如：Clang 12.0.5 - Android S - r416183b 
//       Clang 14.0.6 - Android T - r450784d 
//       Clang 14.0.7 - r450784e 
//       Clang 15.0.1 - r458507 
// 如果提示 403 錯誤，請去 https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86 尋找可用分支、版本

# 自定義 Clang
USE_CUSTOM_CLANG=false
// （ true 或 false ）
// 配置是否使用自定義的 Clang

CUSTOM_CLANG_SOURCE=https://github.com/magojohnji/ZyCromerZ-Clang.git
// （HTTP鏈接）
// 自定義 Clang 的倉庫地址（或 .tar.gz、.zip 文件）

CUSTOM_CLANG_BRANCH=main
// （字符串）
// 自定義 Clang 倉庫的分支名稱，（如果使用 .tar.gz 或者 .zip 文件，留空即可）

### Gcc 編譯工具鏈設置
ENABLE_GCC=true
// （ true 或 false ）
// 是否開啟Gcc 編譯工具鏈

# AOSP Gcc 編譯工具鏈
ENABLE_AOSP_GCC_ARM64=true
// （ true 或 false ）
// 配置是否使用 AOSP Gcc 64 位編譯工具鏈

ENABLE_AOSP_GCC_ARM32=true
// （ true 或 false ）
// 配置是否使用 AOSP Gcc 32 位編譯工具鏈

AOSP_GCC_SYSTEM=linux-x86
// （字符串）
// 編譯內核的操作系統
// Linux：linux-x86
// macOS：darwin-x86

AOSP_GCC_ARM64_VERSION=aarch64-linux-android-4.9
AOSP_GCC_ARM32_VERSION=arm-linux-androideabi-4.9
// （字符串）
// AOSP Gcc 的版本
// 如需自定義請至 https://android.googlesource.com/platform/prebuilts/gcc/ 

AOSP_GCC_ANDROID_VERSION=12.1.0
// （字符串）
// AOSP Gcc 所對應的安卓版本
// 如 12.1.0、10.0.0

AOSP_GCC_RELEASE=r27
// （字符串）
// AOSP Gcc 發布版本號

# 自定義 Gcc
USE_CUSTOM_GCC_64=false
// （ true 或 false ）
// 配置是否使用自定義的 Gcc 64 位編譯工具鏈

CUSTOM_GCC_64_SOURCE=
// （HTTP鏈接）
// 自定義的 Gcc 64 位編譯工具鏈的源，支持 git 倉庫，tar.gz 或者 .zip 文件

CUSTOM_GCC_64_BRANCH=
// （字符串）
// 自定義的 Gcc 64 位編譯工具鏈的分支（如果使用 .tar.gz 或者 .zip 文件，留空即可）

USE_CUSTOM_GCC_32=false
// （ true 或 false ）
// 配置是否使用自定義的 Gcc 32 位編譯工具鏈

CUSTOM_GCC_32_SOURCE=
// （HTTP鏈接）
// 自定義的 Gcc 32 位編譯工具鏈的源，支持 git 倉庫，tar.gz 或者 .zip 文件

CUSTOM_GCC_32_BRANCH=
// （字符串）
// 自定義的 Gcc 32 位編譯工具鏈的分支（如果使用 .tar.gz 或者 .zip 文件，留空即可）

### KernelSU 設置
ENABLE_KERNELSU=true
// （ true 或 false ）
// 配置是否加入 KernelSU 編譯內核

KERNELSU_INSTALLER=https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh
// （HTTP鏈接）
// KernelSU 的安裝腳本地址
// 例如：tiann 原版：https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh
//      MlgmXyysd修改版：https://raw.githubusercontent.com/MlgmXyysd/KernelSU_Debug/master/kernel/setup.sh

KERNELSU_TAG=main
// （字符串）
// KernelSU 的發布版本號
// 例如：對於 tiann 的原版，
// main 分支(開發版): KERNELSU_TAG=main
// 最新 TAG(穩定版): KERNELSU_TAG=
// 指定 TAG(如v0.5.2): KERNELSU_TAG=v0.5.2
// 其他版本請自行探索

KSU_EXPECTED_SIZE=
// （字符串）
// 自定義KernelSU管理器簽名的size值，不需要請留空

KSU_EXPECTED_HASH=
// （字符串）
// 自定義KernelSU管理器簽名的hash值，不需要請留空

BUILD_KERNELSU_BOOT_IMG=true
// （ true 或 false ）
// 配置是否集成 KernelSU 到 boot 鏡像中

KERNELSU_SOURCE_BOOT_IMAGE=
// （HTTP鏈接）
// 原 boot 鏡像鏈接，需要HTTP直鏈
// 例如：https://raw.githubusercontent.com/abc/def/main/boot/boot.img

### Magisk 設置
ENABLE_MAGISK=true
// （ true 或 false ）
// 配置是否使用 Magisk

MAGISK_APK=https://github.com/topjohnwu/Magisk/releases/download/v26.1/Magisk-v26.1.apk
// （HTTP鏈接）
// Magisk 的 APK （理論上只要是 zip 文件格式就可以）的直鏈
// 你也可以使用第三方 Magisk，例如 Delta，Delta-32-Bit，Alpha，Lite，Cygisk，Monet，Maru 等

MAGISK_PATCH_PARTITION=boot
// （字符串）
// Magisk 要修補的分區的類型
// 例如：boot、init_boot、vendor_boot

MAGISK_SOURCE_BOOT_IMAGE=
// （HTTP鏈接）
// Magisk 要修補的源鏡像鏈接
// 例如：https://raw.githubusercontent.com/abc/def/main/boot/boot.img

### 內核編譯設置
DISABLE-LTO=false
// （ true 或 false ）
// 配置是否關閉 LTO 優化，啟用有可能導致錯誤

DISABLE_CC_WERROR=false
// （ true 或 false ）
// 用於修復某些不支持或關閉了Kprobes的內核，修復KernelSU未檢測到開啟Kprobes的變量拋出警告導致錯誤

ADD_KPROBES_CONFIG=true
// （ true 或 false ）
// 添加 Kprobes，自動在 defconfig 注入參數

ADD_OVERLAYFS_CONFIG=true
// （ true 或 false ）
// 添加 Overlayfs，自動在 defconfig 注入參數，為 KernelSU 模塊和 system 分區讀寫提供支持

ENABLE_CCACHE=true
// （ true 或 false ）
// 是否啟用 CCACHE 編譯，以讓第二次編譯內核更快，最少可以減少 2/5 的時間

NEED_DTBO=false
// （ true 或 false ）
// 是否上傳 DTBO

BUILDER_HOST=Github-Action
// （字符串）
// 編譯內核的機器名

***** 如果您將 USE CUSTOM CLANG 或 CUSTOM GCC 設置為 false，則請勿更改 CUSTOM CMDS *****

TC_CUSTOM_CMDS:CLANG_TRIPLE=aarch64-linux-gnu-
// 成功構建內核的自定義工具鏈命令

EXTRA_CMDS:LD=ld.lld
// 成功構建內核的附加命令